#config_version=5

# this is a generic mode for shared racks logic, repsonsibilities include:
# showing light shows when a rack shot is collected
# qualify collect and collect shot, (the eight ball shot)
mode:
  start_events: ball_starting
  code: racks.Racks
  priority: 100

shot_profiles:
  racks_qualify_collect:
    states:
      - name: flash
        show: flash
        speed: 10
  racks_collect:
    states:
      - name: flash
        show: flash
        speed: 10

shots:
  sh_racks_qualify_collect:
    profile: racks_qualify_collect
    enable_events: racks_enable_qualify_collect
    disable_events: saucer_hit, sh_racks_qualify_collect_hit
    switch: s_hook
    show_tokens:
      light: l_hook_1
  sh_racks_collect:
    profile: racks_collect
    hit_events: saucer_collect_rack_show_start
    enable_events: sh_racks_qualify_collect_hit
    disable_events: sh_racks_collect_hit, timer_drops_lower_left_complete
    # Have to handle this in code
    # hit_events: sh_saucer_debounced_hit
    show_tokens:
      light: l_drop_left_arrow_1
  sh_racks_0:
    hit_events: s_standup_left_0_active
  sh_racks_1:
    hit_events: s_standup_left_1_active
  sh_racks_2:
    hit_events: s_standup_left_2_active
  sh_racks_3:
    hit_events: s_standup_left_3_active
  sh_racks_4:
    hit_events: s_standup_left_4_active
  sh_racks_5:
    hit_events: s_standup_left_5_active
  sh_racks_6:
    hit_events: s_standup_left_6_active

# TODO: I can potentially use these for other things to like detecting
# double shots or announcing shots in the right order
sequence_shots:
  sh_racks_5_6_6:
    switch_sequence:
      - s_standup_left_6
      - s_standup_left_5
    sequence_timeout: 50ms
  sh_racks_5_6_5:
    switch_sequence:
      - s_standup_left_5
      - s_standup_left_6
    sequence_timeout: 50ms
  sh_racks_4_5_5:
    switch_sequence:
      - s_standup_left_5
      - s_standup_left_4
    sequence_timeout: 50ms
  sh_racks_4_5_4:
    switch_sequence:
      - s_standup_left_4
      - s_standup_left_5
    sequence_timeout: 50ms
  sh_racks_3_4_4:
    switch_sequence:
      - s_standup_left_4
      - s_standup_left_3
    sequence_timeout: 50ms
  sh_racks_3_4_3:
    switch_sequence:
      - s_standup_left_3
      - s_standup_left_4
    sequence_timeout: 50ms
  sh_racks_2_3_3:
    switch_sequence:
      - s_standup_left_3
      - s_standup_left_2
    sequence_timeout: 50ms
  sh_racks_2_3_2:
    switch_sequence:
      - s_standup_left_2
      - s_standup_left_3
    sequence_timeout: 50ms
  sh_racks_1_2_2:
    switch_sequence:
      - s_standup_left_2
      - s_standup_left_1
    sequence_timeout: 50ms
  sh_racks_1_2_1:
    switch_sequence:
      - s_standup_left_1
      - s_standup_left_2
    sequence_timeout: 50ms
  sh_racks_0_1_1:
    switch_sequence:
      - s_standup_left_1
      - s_standup_left_0
    sequence_timeout: 50ms
  sh_racks_0_1_0:
    switch_sequence:
      - s_standup_left_0
      - s_standup_left_1
    sequence_timeout: 50ms

# TODO: I should probably create new light shows for when two targets are hit at once
# TODO: duplicate logic in awards.yaml, do i need to abstract this out?
event_player:
  sh_racks_qualify_collect_hit:
    - activate_drop_right
    - deactivate_drop_left
    - start_saucer_shot_timers
  racks_collected_loop_stop: racks_collect_show_complete
  racks_collected_loop_complete: racks_collect_show_complete

timers:
  racks_collect_transition:
    end_value: 50
    tick_interval: 64ms
    # rest is controlled through code
    # control_events:
    #   - action: reset
    #     event: timer_racks_collect_transition_complete
    #   - action: reset
    #     event: racks_collected_loop_stop

sound_loop_player:
  racks_collected_loop_start:
    loops:
      action: play
      sound_loop_set: racks_collected_success_snippet
      timing: now
  racks_collected_loop_stop:
    loops:
      action: stop_looping

sound_player:
  racks_collected_loop_stop: success_0
  player_shot_sh_racks_collect_enabled{value}: charge
  player_shot_sh_racks_collect_enabled{not value}:
    charge:
      action: stop
      fade_out: .25
